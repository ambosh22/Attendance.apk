{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from 'react-native-paper';\nimport Background from \"../components/Background\";\nimport Logo from \"../components/Logo\";\nimport Header from \"../components/Header\";\nimport Button from \"../components/Button\";\nimport TextInput from \"../components/TextInput\";\nimport BackButton from \"../components/BackButton\";\nimport { theme } from \"../core/theme\";\nimport { emailValidator } from \"../helpers/emailValidator\";\nimport { passwordValidator } from \"../helpers/passwordValidator\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState({\n      value: '',\n      error: ''\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    email = _useState2[0],\n    setEmail = _useState2[1];\n  var _useState3 = useState({\n      value: '',\n      error: ''\n    }),\n    _useState4 = _slicedToArray(_useState3, 2),\n    password = _useState4[0],\n    setPassword = _useState4[1];\n  var onLoginPressed = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var emailError = emailValidator(email.value);\n      var passwordError = passwordValidator(password.value);\n      if (emailError || passwordError) {\n        setEmail(_objectSpread(_objectSpread({}, email), {}, {\n          error: emailError\n        }));\n        setPassword(_objectSpread(_objectSpread({}, password), {}, {\n          error: passwordError\n        }));\n        return;\n      }\n      try {\n        var response = yield fetch('http://your-server-url.com/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email: email.value,\n            password: password.value\n          })\n        });\n        if (response.status === 200) {\n          navigation.reset({\n            index: 0,\n            routes: [{\n              name: 'Dashboard'\n            }]\n          });\n        } else {}\n      } catch (error) {\n        console.error('Login failed:', error);\n      }\n    });\n    return function onLoginPressed() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var onForgotPassword = function onForgotPassword() {\n    navigation.navigate('ResetPasswordScreen');\n  };\n  return _jsxs(Background, {\n    children: [_jsx(BackButton, {\n      goBack: navigation.goBack\n    }), _jsx(Logo, {}), _jsx(Header, {\n      children: \"Hello.\"\n    }), _jsx(TextInput, {\n      label: \"Email\",\n      returnKeyType: \"next\",\n      value: email.value,\n      onChangeText: function onChangeText(text) {\n        return setEmail({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!email.error,\n      errorText: email.error,\n      autoCapitalize: \"none\",\n      autoCompleteType: \"email\",\n      textContentType: \"emailAddress\",\n      keyboardType: \"email-address\"\n    }), _jsx(TextInput, {\n      label: \"Password\",\n      returnKeyType: \"done\",\n      value: password.value,\n      onChangeText: function onChangeText(text) {\n        return setPassword({\n          value: text,\n          error: ''\n        });\n      },\n      error: !!password.error,\n      errorText: password.error,\n      secureTextEntry: true\n    }), _jsx(View, {\n      style: styles.forgotPassword,\n      children: _jsx(TouchableOpacity, {\n        onPress: onForgotPassword,\n        children: _jsx(Text, {\n          style: styles.forgot,\n          children: \"Forgot your password ?\"\n        })\n      })\n    }), _jsx(Button, {\n      mode: \"contained\",\n      onPress: onLoginPressed,\n      children: \"Log in\"\n    }), _jsx(View, {\n      style: styles.row\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 10\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.primary\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary\n  }\n});","map":{"version":3,"names":["React","useState","TouchableOpacity","StyleSheet","View","Text","Background","Logo","Header","Button","TextInput","BackButton","theme","emailValidator","passwordValidator","jsx","_jsx","jsxs","_jsxs","LoginScreen","_ref","navigation","_useState","value","error","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","onLoginPressed","_ref2","_asyncToGenerator","emailError","passwordError","_objectSpread","response","fetch","method","headers","body","JSON","stringify","status","reset","index","routes","name","console","apply","arguments","onForgotPassword","navigate","children","goBack","label","returnKeyType","onChangeText","text","errorText","autoCapitalize","autoCompleteType","textContentType","keyboardType","secureTextEntry","style","styles","forgotPassword","onPress","forgot","mode","row","create","width","alignItems","marginBottom","flexDirection","marginTop","fontSize","color","colors","primary","link","fontWeight"],"sources":["C:/Users/Asus/Desktop/web2-pattends/src/screens/LoginScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { TouchableOpacity, StyleSheet, View } from 'react-native';\nimport { Text } from 'react-native-paper';\nimport Background from '../components/Background';\nimport Logo from '../components/Logo';\nimport Header from '../components/Header';\nimport Button from '../components/Button';\nimport TextInput from '../components/TextInput';\nimport BackButton from '../components/BackButton';\nimport { theme } from '../core/theme';\nimport { emailValidator } from '../helpers/emailValidator';\nimport { passwordValidator } from '../helpers/passwordValidator';\n\nexport default function LoginScreen({ navigation }) {\n  const [email, setEmail] = useState({ value: '', error: '' });\n  const [password, setPassword] = useState({ value: '', error: '' });\n\n  const onLoginPressed = async () => {\n    const emailError = emailValidator(email.value);\n    const passwordError = passwordValidator(password.value);\n\n    if (emailError || passwordError) {\n      setEmail({ ...email, error: emailError });\n      setPassword({ ...password, error: passwordError });\n      return;\n    }\n\n    try {\n      const response = await fetch('http://your-server-url.com/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: email.value,\n          password: password.value,\n        }),\n      });\n\n      if (response.status === 200) {\n        // Successful login, you can handle the response here (e.g., storing user data, navigating to the Dashboard)\n        navigation.reset({\n          index: 0,\n          routes: [{ name: 'Dashboard' }],\n        });\n      } else {\n        // Handle authentication failure, display an error message\n        // Example: alert('Invalid email or password');\n      }\n    } catch (error) {\n      console.error('Login failed:', error);\n    }\n  };\n\n  const onForgotPassword = () => {\n    // Navigate to the ResetPasswordScreen when the \"Forgot Password?\" button is pressed\n    navigation.navigate('ResetPasswordScreen');\n  }\n\n  return (\n    <Background>\n      <BackButton goBack={navigation.goBack} />\n      <Logo />\n      <Header>Hello.</Header>\n      <TextInput\n        label=\"Email\"\n        returnKeyType=\"next\"\n        value={email.value}\n        onChangeText={(text) => setEmail({ value: text, error: '' })}\n        error={!!email.error}\n        errorText={email.error}\n        autoCapitalize=\"none\"\n        autoCompleteType=\"email\"\n        textContentType=\"emailAddress\"\n        keyboardType=\"email-address\"\n      />\n      <TextInput\n        label=\"Password\"\n        returnKeyType=\"done\"\n        value={password.value}\n        onChangeText={(text) => setPassword({ value: text, error: '' })}\n        error={!!password.error}\n        errorText={password.error}\n        secureTextEntry\n      />\n      <View style={styles.forgotPassword}>\n        <TouchableOpacity onPress={onForgotPassword}>\n          <Text style={styles.forgot}>Forgot your password ?</Text>\n        </TouchableOpacity>\n      </View>\n      <Button mode=\"contained\" onPress={onLoginPressed}>\n        Log in\n      </Button>\n      <View style={styles.row}>\n      </View>\n    </Background>\n  )\n}\n\nconst styles = StyleSheet.create({\n  forgotPassword: {\n    width: '100%',\n    alignItems: 'flex-end',\n    marginBottom: 10,\n  },\n  row: {\n    flexDirection: 'row',\n    marginTop: 4,\n  },\n  forgot: {\n    fontSize: 13,\n    color: theme.colors.primary,\n  },\n  link: {\n    fontWeight: 'bold',\n    color: theme.colors.primary,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}